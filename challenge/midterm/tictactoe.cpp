#include <iostream>
using namespace std;
const int numCell = 4;  // 보드판의 가로 세로 길이
int x, y = 0;  // 사용자에게 xy좌표값을 입력받기 위한 변수

// 사용자 정의 함수
bool checkWin(char currentUser, char board[numCell][numCell]);
bool isValid(int x, int y, char board[numCell][numCell]);

int main() {
  // 게임을 진행하는 데 필요한 변수 선언

  int k = 0;               // 누구 차례인지 체크하기 위한 변수
  char currentUser = 'X';  // 현재 유저의 돌을 저장하기 위한 변수
  char board[numCell][numCell]{};  // 보드판을 나타내는 2차원 배열

  // 보드판 초기화
  for (int i = 0; i < numCell; i++) {
    for (int j = 0; j < numCell; j++) {
      board[i][j] = ' ';
    }
  }

  // 게임을 무한 반복
  while (true) {
    // 1. 누구 차례인지 출력
    // TODO 1.1: 3인용 게임으로 변경
    int number = 3;
    switch (k % number) {
      case 0:
        currentUser = 'X';
        break;
      case 1:
        currentUser = 'O';
        break;
      case 2:
        currentUser = 'H';
    }

    // 차례 알려주기
    cout << k % number + 1 << "번 유저(" << currentUser
         << ")의 차례입니다. -> ";

    // 2. 좌표 입력 받기
    cout << "(x, y) 좌표를 입력하세요: ";
    int x, y;
    cin >> x >> y;

    // 3. 입력받은 좌표의 유효성 체크
    // TODO FUNC 1: isValid 함수 생성 후 호출
    if (!isValid(x, y, board)) {
      // 유효하지 않은 경우, 사용자에게 다시 입력받기
      continue;
    }

    // 4. 입력받은 좌표에 현재 유저의 돌 놓기
    board[x][y] = currentUser;

    // 5. 현재 보드 판 출력
    // TODO 1.2: numCell 숫자에 맞춘 보드판 출력
    // 5. 현재 보드 판 출력
    for (int i = 0; i < numCell; i++) {
      // j는 각 행에서의 열 위치
      for (int j = 0; j < numCell; j++) {
        cout << " " << board[i][j] << " ";
        // 마지막 열이 아니면 열 구분점 출력
        if (j < numCell - 1) {
          cout << "|";
        }
      }
      cout << endl;

      // 마지막 행이 아니면 행 구분선 출력
      if (i < numCell - 1) {
        for (int j = 0; j < numCell; j++) {
          cout << "---";
          // 마지막 열이 아니면 열 구분점 출력
          if (j < numCell - 1) {
            cout << "|";
          }
        }
        cout << endl;
      }
    }
    // 게임 보드의 가장 아래에 마지막 구분선 출력
    for (int j = 0; j < numCell; j++) {
      // 구분선 출력
      cout << "---";
      if (j < numCell - 1) {
        cout << "|";
      }
    }
    cout << endl;

    bool isWin = false;  // 승리 여부
    // TODO FUNC2: 6.1부터 6.2까지 checkWin 함수 생성 후 호출
    // 6.1. 가로/세로 돌 체크하기
    // checkwin 함수 호출해서 승리 여부 파악하기
    if (checkWin(currentUser, board)) {
      cout << k % numCell + 1 << "번 유저(" << currentUser << ")의 승리입니다!"
           << endl;
      break;
    }

    // 6.2. 대각선을 체크하기
    // TODO 1.3: numCell에 맞춘 대각선 빙고 체크 코드로 확장
    // HINT: for 문

    bool diagWin1 =
        true;  // 왼쪽 위에서 오른쪽 아래로 이어지는 대각선에 대한 승리 추적
    bool diagWin2 =
        true;  // 오른쪽 위에서 왼쪽 아래로 이어지는 대각선에 대한 승리 추적

    // 승리 조건 확인하기
    for (int i = 0; i < numCell; i++) {
      if (board[i][i] != currentUser) {
        diagWin1 = false;
      }
      if (board[i][numCell - 1 - i] != currentUser) {
        diagWin2 = false;
      }
    }
    // 승리 상태메세지 출력하기
    if (diagWin1) {
      cout << "왼쪽 위에서 오른쪽 아래 대각선으로 모두 돌이 놓였습니다!"
           << endl;
      isWin = true;
    }

    if (diagWin2) {
      cout << "오른쪽 위에서 왼쪽 아래 대각선으로 모두 돌이 놓였습니다!"
           << endl;
      isWin = true;
    }

    // 승리자 출력하기
    if (isWin == true) {
      cout << k % 2 + 1 << "번 유저(" << currentUser << ")의 승리입니다!"
           << endl;
      break;
    }

    // 7. 모든 칸 다 찼는지 체크하기
    int checked = 0;
    for (int i = 0; i < numCell; i++) {
      for (int j = 0; j < numCell; j++) {
        if (board[i][j] == ' ') {
          checked++;
        }
      }
    }
    if (checked == 0) {
      cout << "모든 칸이 다 찼습니다.  종료합니다. " << endl;
      break;
    }

    k++;
  }

  return 0;
}
// isValid 함수 : 입력 받은 좌표의 유효성 체크
bool isValid(int x, int y, char board[numCell][numCell]) {
  // 좌표 범위를 벗어날때
  if (x >= numCell || y >= numCell) {
    cout << x << "," << y << ": x와 y둘중 하나가 칸을 벗어납니다. " << endl;
    return false;
  }
  // 좌표범위의 입력값이 중복될때
  if (board[x][y] != ' ') {
    cout << x << "," << y << ": 이미 돌이 차있습니다. " << endl;
    return false;
  }
  return true;
}

// checkWin 함수 : 승자 체크
bool checkWin(char currentUser, char board[numCell][numCell]) {
  bool isWin = false;

  // 가로 및 세로 라인 체크
  for (int i = 0; i < numCell; i++) {
    bool rowWin = true;
    bool colWin = true;

    // 가로 및 세로 줄 승리 조건 확인
    for (int j = 0; j < numCell; j++) {
      if (board[i][j] != currentUser) {
        rowWin = false;
      }
      if (board[j][i] != currentUser) {
        colWin = false;
      }
    }
    // 승리 메세지 출력
    if (rowWin) {
      cout << "가로에 모두 돌이 놓였습니다!!";
      isWin = true;
      break;
    }

    if (colWin) {
      cout << "세로에 모두 돌이 놓였습니다!!";
      isWin = true;
      break;
    }
  }

  return isWin;
}
